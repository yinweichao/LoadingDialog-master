apply plugin: 'maven-publish'
apply plugin: 'signing'


task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
}

Properties properties = new Properties()
properties.load(project.rootProject.file('./gradles/maven.properties').newDataInputStream())

def PUBLISH_GROUP_ID = properties.getProperty('GROUP_ID')

def PUBLISH_ARTIFACT_ID =  properties.getProperty('ARTIFACT_ID')

def PUBLISH_VERSION =  properties.getProperty('VERSION_NAME')

def POM_NAME =  properties.getProperty('POM_NAME')
def POM_PACKAGING =  properties.getProperty('POM_PACKAGING')

def POM_DESCRIPTION =  properties.getProperty('POM_DESCRIPTION')
def POM_URL =  properties.getProperty('POM_URL')
def POM_LICENCE_NAME =  properties.getProperty('POM_LICENCE_NAME')
def POM_LICENCE_URL =  properties.getProperty('POM_LICENCE_URL')

def POM_DEVELOPER_ID =  properties.getProperty('POM_DEVELOPER_ID')
def POM_DEVELOPER_NAME =  properties.getProperty('POM_DEVELOPER_NAME')
def POM_DEVELOPER_EMAIL =  properties.getProperty('POM_DEVELOPER_EMAIL')

def POM_SCM_URL =  properties.getProperty('POM_SCM_URL')
def POM_SCM_CONNECTION =  properties.getProperty('POM_SCM_CONNECTION')
def POM_SCM_DEV_CONNECTION =  properties.getProperty('POM_SCM_DEV_CONNECTION')

ext["signing.keyId"] = properties.getProperty('signing.keyId')
ext["signing.password"] = properties.getProperty('signing.password')
ext["signing.secretKeyRingFile"] = properties.getProperty('signing.secretKeyRingFile')
ext["ossrhUsername"] = properties.getProperty('ossrhUsername')
ext["ossrhPassword"] = properties.getProperty('ossrhPassword')

publishing {
    publications {
        release(MavenPublication) {
            // 使用方引用 implementation 'cn.com.jack:mavendemo:2.7.0-SNAPSHOT'
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION

            //也可以指定上传的AAR包，但是需要先手动生成aar
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            // 上传source，这样使用方可以看到方法注释
            artifact androidSourcesJar

            // Self-explanatory metadata for the most part
            pom {
                name = POM_NAME
                packaging = POM_PACKAGING

                description = POM_DESCRIPTION
                // If your project has a dedicated site, use its URL here
                url = POM_URL
                licenses {
                    license {
                        //协议类型，一般默认Apache License2.0的话不用改：
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                    }
                }
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                        email = POM_DEVELOPER_EMAIL
                    }
                }
                // source control management
                scm {
                    //修改成你的Git地址：
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                    //分支地址：
                    url = POM_SCM_URL
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        // 定义一个 maven 仓库
        maven {
            // 可以有且仅有一个仓库不指定 name 属性，会隐式设置为 Maven
            // 根据 versionName 来判断仓库地址
            name = PUBLISH_ARTIFACT_ID

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            // 仓库用户名密码
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}
signing {
    sign publishing.publications
}
